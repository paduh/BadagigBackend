{"version":3,"sources":["../../src/controller/order.js"],"names":["config","db","api","post","req","res","findById","params","badagigerid","err","user","status","json","message","badagigid","request","console","log","newOrder","_id","save","put","id","newRequest","subCategoryId","body","requestedById","fulfilledById","deliveryDays","requestDate","description","budget","get","find","delete","remove"],"mappings":"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","file":"order.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Request from '../model/request';\nimport BadaGig from '../model/badagig';\nimport User from '../model/account';\nimport Order from '../model/order';\nimport bodyParser  from 'body-parser';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // /v1/order/add - Create\n  api.post('/add/byBadaGiger/:badagigerid/byBadaGig/:badagigid', authenticate, (req, res) => {\n      User.findById(req.params.badagigerid, (err, user) => {\n        if (err) {\n            res.status(500).json({message: `An error has occured ${err.message}`});\n            return;\n        } else if (!user){\n          res.status(404).json({message: `An error has occured. User not found:  ${err.message}`});\n          return;\n        }\n      Request.findById(req.params.badagigid, (err, request) => {\n          if (err) {\n              res.status(500).json({message: `An error has occured ${err.message}`});\n              return;\n          } else if (!request){\n            res.status(404).json({message: `An error has occured. Request not found:  ${err.message}`});\n            return;\n          }\n          console.log(`Request ${request}`);\n      let newOrder = new Order();\n      newOrder.badagigid = request._id;\n      newOrder.badagigerid = user._id;\n\n      newOrder.save(err => {\n        if(err){\n          res.status(500).json({ message: err });\n          return;\n        }\n        res.status(200).json({ message: 'Order saved successfully'})\n      });\n\n      // request.fulfilled = \"true\";\n      // request.save(err => {\n      //   if(err){\n      //     res.status(500).json({ message: err });\n      //        return;\n      //   }\n      //   res.status(200).json({ message: 'Request updated successfully'})\n      //   });\n      });\n     });\n    });\n\n  // /v1/request/:id Update\n  api.put('/:id', authenticate, (req, res)=> {\n    Request.findById(req.params.id, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n      newRequest.subCategoryId = req.body.subCategoryId;\n      newRequest.requestedById = req.body.requestedById;\n      newRequest.fulfilledById = req.body.fulfilledById;\n      newRequest.deliveryDays = req.body.deliveryDays;\n      newRequest.requestDate = req.body.requestDate;\n      newRequest.description = req.body.description;\n      newRequest.budget = req.body.budget;\n      // newRequest.platform = req.body.platform;\n      // newRequest.serviceType = req.body.serviceType;\n      // newRequest.body.expertise = req.body.expertise;\n\n        request.save(err  =>{\n          if (err) {\n            res.status(500).json({message: `An error has occured ${err.message}`});\n            return;\n          }\n            res.status(200).json({message: 'Request updated successfully'});\n        });\n    });\n  });\n\n  // /v1/request/byuser/:userId Read\n  api.get('/byUser/:userId', authenticate, (req, res) => {\n    Request.find({'userId': req.params.id}, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n        res.status(200).json(request);\n    });\n  });\n\n  // /v1/request/;id Read one request\n  api.get('/:id', authenticate, (req, res) => {\n    Request.findById(req.params.id, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err. message}`});\n        return;\n      }\n        res.status(200).json(request);\n    });\n  });\n\n  // /v1/request/all Read All request by All users\n  api.get('/', authenticate, (req, res) => {\n    Request.find({}, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n        res.status(200).json(request);\n    });\n  });\n\n\n  // /v1/request/:id Delete 1\n  api.delete('/:id', authenticate, (req, res) => {\n    Request.findById(req.params.id, (err, request) => {\n      if (err) {\n        res.status(404).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n      Request.remove({_id: req.params.id}, (err, request) => {\n        if (err) {\n          res.status(500).json({message: `An error has occured: ${err.message}`});\n          return;\n        }\n          res.status(200).json({message: 'Request deleted successfully'});\n      });\n    });\n  });\n\n  return api;\n}\n"]}