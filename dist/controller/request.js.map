{"version":3,"sources":["../../src/controller/request.js"],"names":["config","db","api","post","req","res","findById","params","id","err","subCategory","status","json","message","badaGigerId","user","newRequest","subcategoryid","_id","badagigerid","deliverydays","body","description","budget","save","put","request","subCategoryId","requestedById","fulfilledById","deliveryDays","requestDate","get","find","delete","remove"],"mappings":"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","file":"request.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Request from '../model/request';\nimport SubCategory from '../model/subcategory';\nimport User from '../model/user';\nimport bodyParser  from 'body-parser';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // /v1/request/add - Create\n  api.post('/add/bySubCategoryId/:id/byBadaGiger/:badaGigerId', authenticate, (req, res)=> {\n\n    SubCategory.findById(req.params.id, (err, subCategory) => {\n      if (err) {\n          res.status(500).json({message: `An error has occured ${err. message}`});\n          return;\n      }\n      User.findById(req.params.badaGigerId, (err, user) => {\n        if (err) {\n            res.status(500).json({message: `An error has occured ${err. message}`});\n            return;\n        }\n          let newRequest = new Request();\n          newRequest.subcategoryid = subCategory._id;\n          newRequest.badagigerid = user._id;\n          newRequest.deliverydays = req.body.deliverydays;\n          newRequest.description = req.body.description;\n          newRequest.budget = req.body.budget;\n          // newRequest.badaGigeeId = req.body.badaGigeeId;\n          // newRequest.platform = req.body.platform;\n          // newRequest.serviceType = req.body.serviceType;\n          // newRequest.body.expertise = req.body.expertise;\n\n          newRequest.save(err => {\n            if (err) {\n              res.status(500).json({message: `An error has occured ${err. message}`});\n              return;\n            }\n              res.status(200).json({message: 'New request submitted successfully'});\n            });\n          });\n        });\n      });\n\n  // /v1/request/:id Update\n  api.put('/:id', authenticate, (req, res)=> {\n    Request.findById(req.params.id, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n      newRequest.subCategoryId = req.body.subCategoryId;\n      newRequest.requestedById = req.body.requestedById;\n      newRequest.fulfilledById = req.body.fulfilledById;\n      newRequest.deliveryDays = req.body.deliveryDays;\n      newRequest.requestDate = req.body.requestDate;\n      newRequest.description = req.body.description;\n      newRequest.budget = req.body.budget;\n      // newRequest.platform = req.body.platform;\n      // newRequest.serviceType = req.body.serviceType;\n      // newRequest.body.expertise = req.body.expertise;\n\n        request.save(err  =>{\n          if (err) {\n            res.status(500).json({message: `An error has occured ${err.message}`});\n            return;\n          }\n            res.status(200).json({message: 'Request updated successfully'});\n        });\n    });\n  });\n\n  // /v1/request/byuser/:userId Read\n  api.get('/byUser/:userId', authenticate, (req, res) => {\n    Request.find({'userId': req.params.id}, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n        res.status(200).json(request);\n    });\n  });\n\n  // /v1/request/;id Read one request\n  api.get('/:id', authenticate, (req, res) => {\n    Request.findById(req.params.id, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err. message}`});\n        return;\n      }\n        res.status(200).json(request);\n    });\n  });\n\n  // /v1/request/all Read All request by All users\n  api.get('/', authenticate, (req, res) => {\n    Request.find({}, (err, request) => {\n      if (err) {\n        res.status(500).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n        res.status(200).json(request);\n    });\n  });\n\n\n  // /v1/request/:id Delete 1\n  api.delete('/:id', authenticate, (req, res) => {\n    Request.findById(req.params.id, (err, request) => {\n      if (err) {\n        res.status(404).json({message: `An error has occured ${err.message}`});\n        return;\n      }\n      Request.remove({_id: req.params.id}, (err, request) => {\n        if (err) {\n          res.status(500).json({message: `An error has occured: ${err.message}`});\n          return;\n        }\n          res.status(200).json({message: 'Request deleted successfully'});\n      });\n    });\n  });\n\n  return api;\n}\n"]}